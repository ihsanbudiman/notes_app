// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package sqlcpg

import (
	"context"
	"database/sql"
	"time"
)

const findUser = `-- name: FindUser :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const findUserByPhoneNumber = `-- name: FindUserByPhoneNumber :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE phone_number = $1 LIMIT 1
`

func (q *Queries) FindUserByPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const findUserByUsernameOrEmailOrPhoneNumber = `-- name: FindUserByUsernameOrEmailOrPhoneNumber :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE username = $1 OR( email = $2 and email IS NOT NULL) OR (phone_number = $3 and phone_number IS NOT NULL) LIMIT 1
`

type FindUserByUsernameOrEmailOrPhoneNumberParams struct {
	Username    string
	Email       sql.NullString
	PhoneNumber sql.NullString
}

func (q *Queries) FindUserByUsernameOrEmailOrPhoneNumber(ctx context.Context, arg FindUserByUsernameOrEmailOrPhoneNumberParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsernameOrEmailOrPhoneNumber, arg.Username, arg.Email, arg.PhoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PhoneNumber,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT id, username, email, phone_number, password, created_at, updated_at, name FROM users
WHERE username = $1 AND password = $2 LIMIT 1
`

type LoginParams struct {
	Username string
	Password string
}

func (q *Queries) Login(ctx context.Context, arg LoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, login, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const register = `-- name: Register :one
INSERT INTO users (username, email, phone_number, password, created_at, updated_at, name)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, username, email, phone_number, password, created_at, updated_at, name
`

type RegisterParams struct {
	Username    string
	Email       sql.NullString
	PhoneNumber sql.NullString
	Password    string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) (User, error) {
	row := q.db.QueryRowContext(ctx, register,
		arg.Username,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}
